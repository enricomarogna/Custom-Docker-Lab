# yamllint disable rule:comments-indentation
---
###############################################################################
#                           Configurazione Authelia                           #
###############################################################################

## Nota: il container si apsettarà la presenza di questo file al percorso /config/configuration.yml

## 1 -- La directory Certificati specifica da dove Authelia caricherà i certificati attendibili (parte pubblica) oltre a
## l'archivio dei certificati di sistema.
## Dovrebbero essere in formato base64 e avere una delle seguenti estensioni: *.cer, *.crt, *.pem.
# certificates_directory: /config/certificates/

## 2 -- Tema da visualizzare: light, dark, grey, auto.
theme: grey

## 3 -- Il codice utilizzato per generare il token JWT durante la convalida dell'identità utente tramite e-mail di conferma.
## Può essere impostato usando un secret: https://www.authelia.com/docs/configuration/secrets.html
## In alternativa al secret decommentare la riga qui sotto e sostituire "password_set_with_docker_secrets" con codice personalizzato
# jwt_secret: password_set_with_docker_secrets #qualsiasi testo o numero che vuoi aggiungere qui per creare jwt Token

## 4 -- URL di reindirizzamento predefinito
##
## Se l'utente tenta di autenticarsi senza alcun referer, Authelia non saprà dove reindirizzare l'utente alla fine del processo di 
## autenticazione. Questo parametro consente di specificare l'URL di reindirizzamento predefinito che verrà utilizzato in tal caso.
##
## Nota: questo parametro è facoltativo. Se non fornito, l'utente non verrà reindirizzato in caso di autenticazione riuscita.
default_redirection_url: https://google.com/ #dove reindirizzare un URL inesistente

##
## 5 -- Configurazione Server
##
server:

  ## Indirizzo di ascolto.
  host: 0.0.0.0

  ## Porta in ascolto.
  port: 9091

  ## Imposta il percorso a livello singolo su cui Authelia rimane in ascolto.
  ## Devono essere caratteri alfanumerici e non devono contenere barre.
  path: ""

  ## Imposta il percorso su disco per le risorse Authelia.
  ## Utile per consentire l'override di specifici asset statici.
  asset_path: /config/assets/

  ## I buffer di solito devono essere configurati per avere lo stesso valore.
  ## Specifiche su https://www.authelia.com/docs/configuration/server.html
  ## La dimensione del buffer di lettura regola la dimensione massima della richiesta in ingresso del server in byte.
  ## La dimensione del buffer di scrittura fa lo stesso per le risposte in uscita.
  read_buffer_size: 4096
  write_buffer_size: 4096

  ## Enables the pprof endpoint.
  enable_pprof: false

  ## Abilita expvars endpoint.
  enable_expvars: false

  ## Disabilita la scrittura delle variabili di controllo dello stato in /app/.healthcheck.env, 
  ## il che fa sì che healthcheck.sh restituisca il codice di uscita 0.
  ## Questo è disabilitato per impostazione predefinita se /app/.healthcheck.env o /app/healthcheck.sh non esistono.
  disable_healthcheck: false

  ## La comunicazione TLS sulla porta del server è disabilitata per default. Popolando i campi key e certificate la si abilita.
  tls:
    ## Il percorso della chiave privata in formato DER base64/PEM.
    key: ""

    ## Il percorso del certificato pubblico in formato DER base64/PEM.
    certificate: ""

##
## 6 -- Configurazione Log
##
log:
  ## Livello di verbosità per i log: info, debug, trace.
  level: debug

  ## Formatto dei log: json, text.
  # format: json

  ## Percorso del file in cui verranno scritti i log. Se non impostato, i log verrano scritti su stdout.
  # file_path: /config/authelia.log

  ## Definire se scrivere i logs anche su stdout qualora fila_path venga definito.
  # keep_stdout: false

##
## 7 -- Configurazione TOTP
##
## Parametri per la genrazione TOTP
totp:
  issuer: example.com # dominio top-level per Authelia

  ## L'algoritmo TOTP da utilizzare.
  ## È FONDAMENTALE leggere la documentazione prima di modificare questa opzione:
  ## https://www.authelia.com/docs/configuration/one-time-password.html#algorithm
  # algorithm: sha1

  ## Il numero di cifre che un utente deve inserire. Deve essere 6 o 8.
  ## La modifica di questa opzione ha effetto solo sulle configurazioni TOTP appena generate.
  ## È FONDAMENTALE leggere la documentazione prima di modificare questa opzione:
  ## https://www.authelia.com/docs/configuration/one-time-password.html#digits
  # digits: 6

  ## Il periodo in secondi per cui è valida una password monouso.
  ## La modifica di questa opzione ha effetto solo sulle configurazioni TOTP appena generate.
  period: 30

  ## ATTENZIONE: prima di modificare il parametro skew, leggere la documentazione di seguito:
  ## https://www.authelia.com/docs/configuration/one-time-password.html#input-validation
  skew: 1

##
## 8 -- Configurazione API Duo Push
##
## Parametri utilizzati per contattare l'API Duo. Questi vengono generati quando si protegge un'applicazione di tipo
## "API Partner Auth" nel pannello di gestione.
# duo_api:
#   hostname: api-123456789.example.com
#   integration_key: ABCDEF
#   ## Il sercet_key può essere impostato tramite secret: https://www.authelia.com/docs/configuration/secrets.html
#   secret_key: 1234567890abcdefghifjkl
#   enable_self_enrollment: false

##
## 9 -- Configurazione NTP
##
## Viene utilizzato per convalidare se il tempo del server è sufficientemente accurato per convalidare TOTP.
# ntp:
#   ## Indirizzo server NTP.
#   address: "time.cloudflare.com:123"

#   ## Versione NTP.
#   version: 4

#   ## Compensazione di tempo massima consentita tra l'host e il server NTP.
#   max_desync: 3s

#   ## 

#   ## Disabilita completamente il controllo NTP all'avvio. Ciò significa che Authelia non contatterà un servizio 
#   ## remoto se lo si imposta su `true` e può operare in modalità offline.
#   disable_startup_check: false

#   ## L'impostazione predefinita `false` impedisce l'avvio solo se viene contattato il server NTP e il 
#   ## tempo non è sincronizzato con il server NTP più della tolleranza `max_desync` configurata. 
#   ## Se impostato su `true`, verrà registrato un errore ma l'avvio continuerà indipendentemente dai risultati.
#   disable_failure: false

##
## 10 -- Configurazione del provider back-end di autenticazione
##
## Utilizzato per verificare le password degli utenti e recuperare informazioni come l'indirizzo e-mail e i 
## gruppi a cui appartengono gli utenti.
##
## I provider disponibili sono: `file`, `ldap`. È necessario utilizzare solo uno di questi provider.
authentication_backend:
  ## Disabilita sia l'elemento HTML che le API per la funzionalità di reimpostazione della password.
  disable_reset_password: false

  ## Il tempo di attesa prima di aggiornare i dati dal back-end di autenticazione. Usa la notazione della durata. 
  ## Per disabilitare questa funzione impostarla su 'disable', questo ridurrà leggermente la sicurezza perché 
  ## per Authelia, gli utenti apparterranno sempre ai gruppi a cui appartenevano al momento dell'accesso anche se 
  ## sono stati rimossi da loro in LDAP. Per forzare l'aggiornamento su ogni richiesta, puoi impostarlo su "0" o "sempre",
  ## questo aumenterà la domanda del processore. Per ulteriori informazioni, vedere la documentazione di seguito.
  ## Documenti di notazione di durata:  https://www.authelia.com/docs/configuration/index.html#duration-notation-format
  ## Documenti intervallo di aggiornamento : https://www.authelia.com/docs/configuration/authentication/ldap.html#refresh-interval
  refresh_interval: 5m

  ##
  ## LDAP (Provider di autenticazione)
  ##
  ## Questo è il provider di autenticazione consigliato in produzione perché consente ad Authelia di scaricare le 
  ## operazioni con stato sul servizio LDAP.
  # ldap:
  #   ## L'implementazione LDAP influisce su elementi come l'attributo utilizzato per reimpostare una password.
  #   ## Le opzioni accettabili sono le seguenti:
  #   ## - 'activedirectory' - Per Microsoft Active Directory.
  #   ## - 'custom' - Per le specifiche personalizzate di attributi e filtri.
  #   ## Attualmente l'impostazione predefinita è `custom` per mantenere il comportamento esistente.
  #   ##
  #   ## Documentazione: https://www.authelia.com/docs/configuration/authentication/ldap.html#defaults
  #   implementation: custom

  #   ## Url del server ldap. Formato: <scheme>://<address>[:<port>].
  #   ## Scheme può essere sia nel formato ldap che ldaps (porta opzionale).
  #   url: ldap://127.0.0.1

  #   ## Il dial timeout per LDAP.
  #   timeout: 5s

  #   ## Usa StartTLS con la connessione LDAP.
  #   start_tls: false

  #   tls:
  #     ## Nome del server per la convalida del certificato (nel caso non sia impostato correttamente nell'URL).
  #     # server_name: ldap.example.com

  #     ## Salta la verifica del certificato del server (per consentire un certificato autofirmato). 
  #     ## Invece di impostare questa opzione, si consiglia vivamente di aggiungere la parte pubblica del certificato 
  #     ## alla directory dei certificati che è definita dall'opzione `directory_certificati` nella parte superiore 
  #     ## della configurazione.
  #     skip_verify: false

  #     ## Versione minima di TLS per Secure LDAP o LDAP StartTLS.
  #     minimum_version: TLS1.2

  #   ## The distinguished name of the container searched for objects in the directory information tree.
  #   ## See also: additional_users_dn, additional_groups_dn.
  #   base_dn: dc=example,dc=com

  #   ## The attribute holding the username of the user. This attribute is used to populate the username in the session
  #   ## information. It was introduced due to #561 to handle case insensitive search queries. For you information,
  #   ## Microsoft Active Directory usually uses 'sAMAccountName' and OpenLDAP usually uses 'uid'. Beware that this
  #   ## attribute holds the unique identifiers for the users binding the user and the configuration stored in database.
  #   ## Therefore only single value attributes are allowed and the value must never be changed once attributed to a user
  #   ## otherwise it would break the configuration for that user. Technically, non-unique attributes like 'mail' can also
  #   ## be used but we don't recommend using them, we instead advise to use the attributes mentioned above
  #   ## (sAMAccountName and uid) to follow https://www.ietf.org/rfc/rfc2307.txt.
  #   # username_attribute: uid

  #   ## The additional_users_dn is prefixed to base_dn and delimited by a comma when searching for users.
  #   ## i.e. with this set to OU=Users and base_dn set to DC=a,DC=com; OU=Users,DC=a,DC=com is searched for users.
  #   additional_users_dn: ou=users

  #   ## The users filter used in search queries to find the user profile based on input filled in login form.
  #   ## Various placeholders are available in the user filter which you can read about in the documentation which can
  #   ## be found at: https://www.authelia.com/docs/configuration/authentication/ldap.html#users-filter-replacements
  #   ##
  #   ## Recommended settings are as follows:
  #   ## - Microsoft Active Directory: (&({username_attribute}={input})(objectCategory=person)(objectClass=user))
  #   ## - OpenLDAP:
  #   ##   - (&({username_attribute}={input})(objectClass=person))
  #   ##   - (&({username_attribute}={input})(objectClass=inetOrgPerson))
  #   ##
  #   ## To allow sign in both with username and email, one can use a filter like
  #   ## (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
  #   users_filter: (&({username_attribute}={input})(objectClass=person))

  #   ## The additional_groups_dn is prefixed to base_dn and delimited by a comma when searching for groups.
  #   ## i.e. with this set to OU=Groups and base_dn set to DC=a,DC=com; OU=Groups,DC=a,DC=com is searched for groups.
  #   additional_groups_dn: ou=groups

  #   ## The groups filter used in search queries to find the groups based on relevant authenticated user.
  #   ## Various placeholders are available in the groups filter which you can read about in the documentation which can
  #   ## be found at: https://www.authelia.com/docs/configuration/authentication/ldap.html#groups-filter-replacements
  #   ##
  #   ## If your groups use the `groupOfUniqueNames` structure use this instead:
  #   ##    (&(uniqueMember={dn})(objectClass=groupOfUniqueNames))
  #   groups_filter: (&(member={dn})(objectClass=groupOfNames))

  #   ## The attribute holding the name of the group.
  #   # group_name_attribute: cn

  #   ## The attribute holding the mail address of the user. If multiple email addresses are defined for a user, only the
  #   ## first one returned by the LDAP server is used.
  #   # mail_attribute: mail

  #   ## The attribute holding the display name of the user. This will be used to greet an authenticated user.
  #   # display_name_attribute: displayName

  #   ## The username and password of the admin user.
  #   user: cn=admin,dc=example,dc=com
  #   ## Password can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html
  #   password: password

  ##
  ## File (Authentication Provider)
  ##
  ## With this backend, the users database is stored in a file which is updated when users reset their passwords.
  ## Therefore, this backend is meant to be used in a dev environment and not in production since it prevents Authelia
  ## to be scaled to more than one instance. The options under 'password' have sane defaults, and as it has security
  ## implications it is highly recommended you leave the default values. Before considering changing these settings
  ## please read the docs page below:
  ## https://www.authelia.com/docs/configuration/authentication/file.html#password-hash-algorithm-tuning
  ##
  ## Important: Kubernetes (or HA) users must read https://www.authelia.com/docs/features/statelessness.html
  ##
  file:
    path: /config/users_database.yml #this is where your authorized users are stored
    password:
      algorithm: argon2id
      iterations: 1
      key_length: 32
      salt_length: 16
      memory: 1024
      parallelism: 8

##
## 11 - Access Control Configuration
##
## Access control is a list of rules defining the authorizations applied for one resource to users or group of users.
##
## If 'access_control' is not defined, ACL rules are disabled and the 'bypass' rule is applied, i.e., access is allowed
## to anyone. Otherwise restrictions follow the rules defined.
##
## Note: One can use the wildcard * to match any subdomain.
## It must stand at the beginning of the pattern. (example: *.myexample.com)
##
## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct.
##
## Definition: A 'rule' is an object with the following keys: 'domain', 'subject', 'policy' and 'resources'.
##
## - 'domain' defines which domain or set of domains the rule applies to.
##
## - 'subject' defines the subject to apply authorizations to. This parameter is optional and matching any user if not
##    provided. If provided, the parameter represents either a user or a group. It should be of the form
##    'user:<username>' or 'group:<groupname>'.
##
## - 'policy' is the policy to apply to resources. It must be either 'bypass', 'one_factor', 'two_factor' or 'deny'.
##
## - 'resources' is a list of regular expressions that matches a set of resources to apply the policy to. This parameter
##   is optional and matches any resource if not provided.
##
## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies.
access_control:
  ## Default policy can either be 'bypass', 'one_factor', 'two_factor' or 'deny'. It is the policy applied to any
  ## resource if there is no policy to be applied to the user.
  default_policy: deny

  networks:
    - name: internal
      networks:
        - 192.xxx.x.0/24
    - name: VPN
      networks: 10.8.0.0/16

  rules:
    ## Rules applied to everyone

    ## ABILITA HOST E SUBHOST SULLA RETE DOMESTICA
    - domain:
        - "*.example.com"
        - "example.com"
      policy: bypass
      networks:
        - internal

    ## SBLOCCA API
    - domain: 
        - "linkding.example.com"
        - "freshrss.example.com"
        - "jackett.example.com"
        - "baikal.example.com"
        - "navidrome.example.com"
      resources:
        - '^/api/.*$'
        - '^/dav.php/.*$' # baikal
        - '^/rest.*$'     # navidrome
      policy: bypass
    
    ## SBLOCCA API GOTIFY
    - domain:
        - "gotify.example.com"
      resources:
        - "/client"
        - "/current/user"
        - "/application"
        - "/message.*$"
        - "/stream.*$"
        - "/version"
      policy: bypass

    ## BLOCCA LOGIN WORDPRESS
    - domain:
        - "wordpress1.example.com"
        - "wordpress2.example.com"
      resources: 
        - "^*/wp-login.*$" # diverso da /wp-login.php
      policy: two_factor

    ## BLOCCA PAGINA LOGIN
    - domain:
        - "proxy.example.com"
      resources: 
        - "^*/login.*$" # nginx-pm
      policy: two_factor

    ## ABILITA HOST E SUBHOST SU INTERNET
    - domain:
        # WORDPRESS WEBSITES
        - "wordpress1.example.com"
        - "wordpress2.example.com"
        # SERVICES
        - "auth.example.com"
        - "wallabag.example.com"
        - "rssbridge.example.com"
        - "plex.example.com"
        - "heimdall.example.com"
        - "proxy.example.com"
      policy: bypass

    ## OBBLIGA TUTTI I RIMANENTI SUBHOST ALLA VERIFICA
    - domain:
        - "*.example.com"
      policy: two_factor


    # - domain: secure.example.com
    #   policy: one_factor
    #   ## Network based rule, if not provided any network matches.
    #   networks:
    #     - internal
    #     - VPN
    #     - 192.168.1.0/24
    #     - 10.0.0.1

    # - domain:
    #     - secure.example.com
    #     - private.example.com
    #   policy: two_factor

    # - domain: singlefactor.example.com
    #   policy: one_factor

    # ## Rules applied to 'admins' group
    # - domain: "mx2.mail.example.com"
    #   subject: "group:admins"
    #   policy: deny

    # - domain: "*.example.com"
    #   subject:
    #     - "group:admins"
    #     - "group:moderators"
    #   policy: two_factor

    # ## Rules applied to 'dev' group
    # - domain: dev.example.com
    #   resources:
    #     - "^/groups/dev/.*$"
    #   subject: "group:dev"
    #   policy: two_factor

    # ## Rules applied to user 'john'
    # - domain: dev.example.com
    #   resources:
    #     - "^/users/john/.*$"
    #   subject: "user:john"
    #   policy: two_factor

    # ## Rules applied to user 'harry'
    # - domain: dev.example.com
    #   resources:
    #     - "^/users/harry/.*$"
    #   subject: "user:harry"
    #   policy: two_factor

    # ## Rules applied to user 'bob'
    # - domain: "*.mail.example.com"
    #   subject: "user:bob"
    #   policy: two_factor
    # - domain: "dev.example.com"
    #   resources:
    #     - "^/users/bob/.*$"
    #   subject: "user:bob"
    #   policy: two_factor

    #add or remove additional subdomains as necessary. currenlty only supports ONE top-level domain
    #any time you add a new subdomain, you will need to restart the Authelia container to recognize the new settings/rules

##
## 12 -- Session Provider Configuration
##
## The session cookies identify the user once logged in.
## The available providers are: `memory`, `redis`. Memory is the provider unless redis is defined.
session:
  ## The name of the session cookie.
  name: authelia_session

  ## The domain to protect.
  ## Note: the authenticator must also be in that domain.
  ## If empty, the cookie is restricted to the subdomain of the issuer.
  domain: example.com  # Should match whatever your root protected domain is

  ## Sets the Cookie SameSite value. Possible options are none, lax, or strict.
  ## Please read https://www.authelia.com/docs/configuration/session/#same_site
  #same_site: lax

  ## The secret to encrypt the session data. This is only used with Redis / Redis Sentinel.
  ## Secret can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html
  # secret: password_set_with_docker_secrets #any text or number you want to add here to create jwt Token

  ## The value for expiration, inactivity, and remember_me_duration are in seconds or the duration notation format.
  ## See: https://www.authelia.com/docs/configuration/index.html#duration-notation-format
  ## All three of these values affect the cookie/session validity period. Longer periods are considered less secure
  ## because a stolen cookie will last longer giving attackers more time to spy or attack.

  ## The time before the cookie expires and the session is destroyed if remember me IS NOT selected.
  expiration: 3600  # 1 hour

  ## The inactivity time before the session is reset. If expiration is set to 1h, and this is set to 5m, if the user
  ## does not select the remember me option their session will get destroyed after 1h, or after 5m since the last time
  ## Authelia detected user activity.
  inactivity: 300  # 5 minutes

  ## The time before the cookie expires and the session is destroyed if remember me IS selected.
  ## Value of 0 disables remember me.
  # remember_me_duration: 1M

  ##
  ## Redis Provider
  ##
  ## Important: Kubernetes (or HA) users must read https://www.authelia.com/docs/features/statelessness.html
  ##
  # redis:
  #   host: 127.0.0.1
  #   port: 6379
  #   ## Use a unix socket instead
  #   # host: /var/run/redis/redis.sock

  #   ## Username used for redis authentication. This is optional and a new feature in redis 6.0.
  #   # username: authelia

  #   ## Password can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html
  #   password: authelia

  #   ## This is the Redis DB Index https://redis.io/commands/select (sometimes referred to as database number, DB, etc).
  #   database_index: 0

  #   ## The maximum number of concurrent active connections to Redis.
  #   maximum_active_connections: 8

  #   ## The target number of idle connections to have open ready for work. Useful when opening connections is slow.
  #   minimum_idle_connections: 0

  #   ## The Redis TLS configuration. If defined will require a TLS connection to the Redis instance(s).
  #   # tls:
  #     ## Server Name for certificate validation (in case you are using the IP or non-FQDN in the host option).
  #     # server_name: myredis.example.com

  #     ## Skip verifying the server certificate (to allow a self-signed certificate).
  #     ## In preference to setting this we strongly recommend you add the public portion of the certificate to the
  #     ## certificates directory which is defined by the `certificates_directory` option at the top of the config.
  #     # skip_verify: false

  #     ## Minimum TLS version for the connection.
  #     # minimum_version: TLS1.2

  #   ## The Redis HA configuration options.
  #   ## This provides specific options to Redis Sentinel, sentinel_name must be defined (Master Name).
  #   # high_availability:
  #     ## Sentinel Name / Master Name.
  #     # sentinel_name: mysentinel

  #     ## Specific username for Redis Sentinel. The node username and password is configured above.
  #     # sentinel_username: sentinel_specific_user

  #     ## Specific password for Redis Sentinel. The node username and password is configured above.
  #     # sentinel_password: sentinel_specific_pass

  #     ## The additional nodes to pre-seed the redis provider with (for sentinel).
  #     ## If the host in the above section is defined, it will be combined with this list to connect to sentinel.
  #     ## For high availability to be used you must have either defined; the host above or at least one node below.
  #     # nodes:
  #     #   - host: sentinel-node1
  #     #     port: 6379
  #     #   - host: sentinel-node2
  #     #     port: 6379

  #     ## Choose the host with the lowest latency.
  #     # route_by_latency: false

  #     ## Choose the host randomly.
  #     # route_randomly: false

##
## 13 -- Regulation Configuration
##
## This mechanism prevents attackers from brute forcing the first factor. It bans the user if too many attempts are made
## in a short period of time.
regulation:
  ## The number of failed login attempts before user is banned. Set it to 0 to disable regulation.
  max_retries: 3

  ## The time range during which the user can attempt login before being banned. The user is banned if the
  ## authentication failed 'max_retries' times in a 'find_time' seconds window. Find Time accepts duration notation.
  ## See: https://www.authelia.com/docs/configuration/index.html#duration-notation-format
  find_time: 10m

  ## The length of time before a banned user can login again. Ban Time accepts duration notation.
  ## See: https://www.authelia.com/docs/configuration/index.html#duration-notation-format
  ban_time: 12h

##
## 14 -- Storage Provider Configuration
##
## The available providers are: `local`, `mysql`, `postgres`. You must use one and only one of these providers.
storage:
  ## The encryption key that is used to encrypt sensitive information in the database. Must be a string with a minimum
  ## length of 20. Please see the docs if you configure this with an undesirable key and need to change it.
  # encryption_key: you_must_generate_a_random_string_of_more_than_twenty_chars_and_configure_this

  ##
  ## Local (Storage Provider)
  ##
  ## This stores the data in a SQLite3 Database.
  ## This is only recommended for lightweight non-stateful installations.
  ##
  ## Important: Kubernetes (or HA) users must read https://www.authelia.com/docs/features/statelessness.html
  ##
  # local:
  #   path: /config/db.sqlite3 #this is your databse. You could use a mysql database if you wanted, but we're going to use this one.
  # encryption_key: myencryptedkey #added Dec 5 2021

  ##
  ## MySQL / MariaDB (Storage Provider)
  ##
  mysql:
    host: mariadb
    port: 3306
    database: authelia_db_name
    username: authelia_username
    ## Password can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html
    #password: authelia_password
    timeout: 5s

  ##
  ## PostgreSQL (Storage Provider)
  ##
  # postgres:
  #   host: 127.0.0.1
  #   port: 5432
  #   database: authelia
  #   schema: public
  #   username: authelia
  #   ## Password can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html
  #   password: mypassword
  #   timeout: 5s
  #   ssl:
  #     mode: disable
  #     root_certificate: disable
  #     certificate: disable
  #     key: disable

##
## 15 -- Notification Provider
##
## Notifications are sent to users when they require a password reset, a U2F registration or a TOTP registration.
## The available providers are: filesystem, smtp. You must use only one of these providers.
notifier:
  ## You can disable the notifier startup check by setting this to true.
  disable_startup_check: true

  ##
  ## File System (Notification Provider)
  ##
  ## Important: Kubernetes (or HA) users must read https://www.authelia.com/docs/features/statelessness.html
  ##
  # filesystem:
  #   filename: /config/notification.txt

  ##
  ## SMTP (Notification Provider)
  ##
  ## Use a SMTP server for sending notifications. Authelia uses the PLAIN or LOGIN methods to authenticate.
  ## [Security] By default Authelia will:
  ##   - force all SMTP connections over TLS including unauthenticated connections
  ##      - use the disable_require_tls boolean value to disable this requirement
  ##        (only works for unauthenticated connections)
  ##   - validate the SMTP server x509 certificate during the TLS handshake against the hosts trusted certificates
  ##     (configure in tls section)
  smtp:
    ## The SMTP host to connect to.
    host: smtp.gmail.com #email smtp server

    ## The port to connect to the SMTP host on.
    port: 587 #email smtp port

    ## The connection timeout.
    # timeout: 5s

    ## The username used for SMTP authentication.
    username: la_mia_email@gmail.com #your email address

    ## The password used for SMTP authentication.
    ## Can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html
    # password: password_set_with_docker_secrets #your email password

    ## The sender is used to is used for the MAIL FROM command and the FROM header.
    ## If this is not defined and the username is an email, we use the username as this value. This can either be just
    ## an email address or the RFC5322 'Name <email address>' format.
    sender: "Authelia <la_mia_email@gmail.com>"

    ## HELO/EHLO Identifier. Some SMTP Servers may reject the default of localhost.
    identifier: localhost

    ## Subject configuration of the emails sent. {title} is replaced by the text from the notifier.
    subject: "[Authelia] {title}"

    ## This address is used during the startup check to verify the email configuration is correct.
    ## It's not important what it is except if your email server only allows local delivery.
    startup_check_address: usela_mia_emailrname@gmail.com

    ## By default we require some form of TLS. This disables this check though is not advised.
    disable_require_tls: false

    ## Disables sending HTML formatted emails.
    disable_html_emails: false

    tls:
      ## Server Name for certificate validation (in case you are using the IP or non-FQDN in the host option).
      # server_name: smtp.example.com

      ## Skip verifying the server certificate (to allow a self-signed certificate).
      ## In preference to setting this we strongly recommend you add the public portion of the certificate to the
      ## certificates directory which is defined by the `certificates_directory` option at the top of the config.
      skip_verify: false

      ## Minimum TLS version for either StartTLS or SMTPS.
      minimum_version: TLS1.2

##
## 16 -- Identity Providers
##
# identity_providers:

  ##
  ## OpenID Connect (Identity Provider)
  ##
  ## It's recommended you read the documentation before configuration of this section:
  ## https://www.authelia.com/docs/configuration/identity-providers/oidc.html
  # oidc:
    ## The hmac_secret is used to sign OAuth2 tokens (authorization code, access tokens and refresh tokens).
    ## HMAC Secret can also be set using a secret: https://www.authelia.com/docs/configuration/secrets.html
    # hmac_secret: this_is_a_secret_abc123abc123abc

    ## The issuer_private_key is used to sign the JWT forged by OpenID Connect.
    ## Issuer Private Key can also be set using a secret: https://docs.authelia.com/configuration/secrets.html
    # issuer_private_key: |
    #   --- KEY START
    #   --- KEY END

    ## The lifespans configure the expiration for these token types.
    # access_token_lifespan: 1h
    # authorize_code_lifespan: 1m
    # id_token_lifespan: 1h
    # refresh_token_lifespan: 90m

    ## Enables additional debug messages.
    # enable_client_debug_messages: false

    ## SECURITY NOTICE: It's not recommended changing this option, and highly discouraged to have it below 8 for
    ## security reasons.
    # minimum_parameter_entropy: 8

    ## Clients is a list of known clients and their configuration.
    # clients:
      # -
        ## The ID is the OpenID Connect ClientID which is used to link an application to a configuration.
        # id: myapp

        ## The description to show to users when they end up on the consent screen. Defaults to the ID above.
        # description: My Application

        ## The client secret is a shared secret between Authelia and the consumer of this client.
        # secret: this_is_a_secret

        ## Sets the client to public. This should typically not be set, please see the documentation for usage.
        # public: false

        ## The policy to require for this client; one_factor or two_factor.
        # authorization_policy: two_factor

        ## Audience this client is allowed to request.
        # audience: []

        ## Scopes this client is allowed to request.
        # scopes:
          # - openid
          # - groups
          # - email
          # - profile

        ## Redirect URI's specifies a list of valid case-sensitive callbacks for this client.
        # redirect_uris:
        # - https://oidc.example.com:8080/oauth2/callback

        ## Grant Types configures which grants this client can obtain.
        ## It's not recommended to define this unless you know what you're doing.
        # grant_types:
          # - refresh_token
          # - authorization_code

        ## Response Types configures which responses this client can be sent.
        ## It's not recommended to define this unless you know what you're doing.
        # response_types:
          # - code

        ## Response Modes configures which response modes this client supports.
        # response_modes:
          # - form_post
          # - query
          # - fragment

        ## The algorithm used to sign userinfo endpoint responses for this client, either none or RS256.
        # userinfo_signing_algorithm: none
...
